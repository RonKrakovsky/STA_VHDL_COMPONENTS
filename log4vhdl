# ufix(28,3) = 31 bit
# 0 to 150 log
# log(in) = ufix(25,7) = 32

import math
dB_max = math.log(pow(2, 28), 10)
print(dB_max)
lut_width = dB_max/0.01
print(lut_width)
dB = 0
frac_width_1 = 8
frac_width = 128
last = -1

for i in range(int(lut_width)+1):
    num_0 = pow(10, dB)
    num_1 = pow(10, dB + 0.01)
    frac_bit_0 = int((num_0 % 1) * frac_width_1)
    int_bit_0 = int(num_0) * frac_width_1
    frac_bit_1 = int((num_1 % 1) * frac_width_1)
    int_bit_1 = int(num_1) * frac_width_1

    frac_log_bit_0 = int((dB % 1) * frac_width)
    int_log_bit_0 = int(dB) * frac_width
    num_0 = int_bit_0+frac_bit_0
    num_1 = int_bit_1+frac_bit_1
    if num_0 != last:
        if i == int(lut_width):
            print("when ", num_0, " to ", pow(2, 31)-1, "=> aso_source_data <= to_unsigned(", frac_log_bit_0 + int_log_bit_0 ,",32);")
        else:
            print("when ", last+1, " to ", num_1, "=> aso_source_data <= to_unsigned(", frac_log_bit_0 + int_log_bit_0 ,",32);")
        last = num_1
    dB = dB + 0.01


#dB = 0
#for i in range(int(lut_width)+1):
#    #print(dB)
#    frac_log_bit_0 = int((dB % 1) * frac_width)
#    #print(frac_bit_0)
#    int_log_bit_0 = int(dB) * frac_width
#    #print(int_bit_0)
#    print(frac_log_bit_0+int_log_bit_0)
#    dB = dB + 0.01
#    #print(dB)

#
